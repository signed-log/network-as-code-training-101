---
- name: Define and enforce a configuration reference
  hosts: all
  gather_facts: false
  become: true
  become_method: ansible.netcommon.enable
  vars:
    ansible_connection: ansible.netcommon.network_cli
    ansible_python_interpreter: "python"
    ansible_network_os: 'arista.eos.eos'
    ansible_user: admin
    ansible_password: admin
    method: "replaced"
  tasks:
    - name: Get hostvars from the inventory
      ansible.builtin.debug:
        var: hostvars[inventory_hostname]
    - name: Set AS number variable
      ansible.builtin.set_fact:
        as_number: "{{ hostvars[inventory_hostname].bgp_routing_instances.0.endpoints.0.autonomous_system.asn }}"
    - name: Get the loopback0 IP address of all other devices
      ansible.builtin.set_fact:
        bgp_neighbors: >-
          [{{ groups['all']
          | reject('equalto', inventory_hostname)
          | map('extract', hostvars, 'interfaces')
          | map('selectattr', 'name', 'equalto', 'loopback0')
          | flatten
          | first
          | dict2items
          | selectattr('key', 'equalto', 'ip_addresses')
          | map(attribute='value')
          | flatten
          | first
          | dict2items
          | selectattr('key', 'equalto', 'address')
          | map(attribute='value')
          | map('regex_replace', '/.*$', '')
          | map('regex_replace', '^', 'peer=')
          | community.routeros.list_to_dict
          | combine({'remote_as': as_number})
          }}]
    - name: Set the hostname
      arista.eos.eos_hostname:
        config:
          hostname: "{{ name }}"
        state: "{{ method }}"
    - name: Create interfaces
      arista.eos.eos_l2_interfaces:
        state: "{{ method }}"
        config:
          - name: "{{ item.name }}"
      loop: "{{ hostvars[inventory_hostname].interfaces }}"
    - name: Set Interface config
      arista.eos.eos_l3_interfaces:
        state: "{{ method }}"
        config:
          - name: "{{ item.name }}"
            ipv4:
              - address: "{{ item.ip_addresses.0.address }}"
      loop: "{{ hostvars[inventory_hostname].interfaces }}"
      when: item.ip_addresses | length > 0
    - name: Delete the BGP config
      arista.eos.eos_bgp_global:
        state: "deleted"
    - name: Set BGP config (assuming a single AS number for all peers)
      arista.eos.eos_bgp_global:
        state: "merged"
        config:
          as_number: "{{ hostvars[inventory_hostname].bgp_routing_instances.0.endpoints.0.autonomous_system.asn }}"
          neighbor: "{{ bgp_neighbors }}"
      when: hostvars[inventory_hostname].bgp_routing_instances | length > 0
